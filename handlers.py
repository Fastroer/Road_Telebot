from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram import F, Router
import keyboards as kb
import re

from db.base_db import is_user_registered, register_user, register_user_car, \
    delete_user, update_user_car, get_user_id, driver_search, add_message, your_messages
from states import RegistrationStates, UsersSearchStates

router = Router()


async def process_callback(callback: CallbackQuery, message_text):
    await callback.answer()
    await callback.message.answer(message_text, reply_markup=None)
    await callback.message.delete()


async def validate_car_number(car_number):
    patterns = {
        "–ë–µ–ª–∞—Ä—É—Å–∏": r'^\d{4}[A-Z]{2}-\d$',
        "–†–æ—Å—Å–∏–∏": r'^X\d{3}[A-Z]{2}\d{2,3}$',
        "–£–∫—Ä–∞–∏–Ω—ã": r'^[A-Z]{2}\d{4}[A-Z]{2}$',
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞": r'^[Xx]?\d{2,6}[XYZxyz]{0,3}$',
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ ": r"^\d{3}[XYxy]{2}\d{2}$",
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞  ": r"^\d{3}[XYZxyz]{3}\d{2}$",
    }

    for country, pattern in patterns.items():
        if re.match(pattern, car_number):
            return country
    return None


@router.message(F.text == '/start')
async def start(message: Message):
    user_name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –ë–æ—Ç –ù–µ–≤–æ–≤–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏,"
                         f" –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø—Ä–æ –Ω–∏—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=kb.main)


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å—Å—è üì§')
async def registration(message: Message):
    is_registered = await is_user_registered(message.from_user.id)

    if is_registered is None:
        await message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return

    user_id = await get_user_id(telegram_id=message.from_user.id)
    await delete_user(user_id)
    await message.answer('–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å—Ç–µ—Ä—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')


@router.message(F.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è üñ•')
async def registration(message: Message, state: FSMContext):
    is_registered = await is_user_registered(message.from_user.id)

    if is_registered is not None:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
        return
    await state.set_state(RegistrationStates.waiting_for_contact)

    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ñ–∏–ª–µ–º, '
                         '—Ç–∞–∫ –º—ã –ø–æ–ª—É—á–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ', reply_markup=kb.share_profile)


@router.message(RegistrationStates.waiting_for_contact)
async def get_contact(message: Message, state: FSMContext):
    contact = message.contact
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {contact.first_name}.\n"
                         f"–í–∞—à –Ω–æ–º–µ—Ä {contact.phone_number} –±—ã–ª –ø–æ–ª—É—á–µ–Ω.\n"
                         f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
                         reply_markup=ReplyKeyboardRemove())

    await state.set_state(RegistrationStates.waiting_for_city)

    @router.message(RegistrationStates.waiting_for_city)
    async def get_message(message: Message, state: FSMContext):
        await message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {message.text}')
        await message.delete()

        await register_user(first_name=message.from_user.first_name, last_name=message.from_user.last_name,
                            phone_number=contact.phone_number, city=message.text,
                            telegram_id=message.from_user.id)

        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, "
                             "—Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—à–µ –∞–≤—Ç–æ")
        await state.set_state(RegistrationStates.waiting_for_make)
        keyboard = await kb.get_car_brands_keyboard()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard.as_markup())


@router.callback_query(RegistrationStates.waiting_for_make)
async def get_machine_mark(callback: CallbackQuery, state: FSMContext):
    await process_callback(callback, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞—Ä–∫—É {callback.data}')

    user_id = await get_user_id(telegram_id=callback.from_user.id)
    await register_user_car(make=callback.data, user_id=user_id)

    models = [model async for model in kb.get_models_by_brand_async(callback.data)]

    await state.set_state(RegistrationStates.waiting_for_model)

    keyboard = await kb.get_car_models_keyboard(models)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard.as_markup())


@router.callback_query(RegistrationStates.waiting_for_model)
async def get_machine_model(callback: CallbackQuery, state: FSMContext):
    await process_callback(callback, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å {callback.data}')

    user_id = await get_user_id(telegram_id=callback.from_user.id)
    await update_user_car(data=['model', callback.data], user_id=user_id)

    await state.set_state(RegistrationStates.waiting_for_year)

    keyboard = await kb.get_car_years_keyboard()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard.as_markup())


@router.callback_query(RegistrationStates.waiting_for_year)
async def get_machine_year(callback: CallbackQuery, state: FSMContext):
    await process_callback(callback, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ {callback.data}')

    user_id = await get_user_id(telegram_id=callback.from_user.id)
    await update_user_car(data=['year', callback.data], user_id=user_id)

    await state.set_state(RegistrationStates.waiting_for_color)

    keyboard = await kb.get_car_colors_keyboard()
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard.as_markup())


@router.callback_query(RegistrationStates.waiting_for_color)
async def get_machine_color(callback: CallbackQuery, state: FSMContext):
    await process_callback(callback, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ü–≤–µ—Ç –º–∞—à–∏–Ω—ã {callback.data}')

    user_id = await get_user_id(telegram_id=callback.from_user.id)
    await update_user_car(data=['color', callback.data], user_id=user_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  "- 1234ZZ-7 (–¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏)\n"
                                  "- X123YZ12, X123YZ123 (–¥–ª—è –†–æ—Å—Å–∏–∏)\n"
                                  "- YZ1234YX (–¥–ª—è –£–∫—Ä–∞–∏–Ω—ã)\n"
                                  "- X123YZ, X1234YZ, X1234XYZ, 1234YZ, 1234XYZ, X123456, "
                                  "123XY45, 123XYZ45, 12XY (–¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞):")

    await state.set_state(RegistrationStates.waiting_for_license_plate)

    @router.message(RegistrationStates.waiting_for_license_plate)
    async def get_message_car(message: Message, state: FSMContext):
        car_number = message.text

        country = await validate_car_number(car_number)

        if country is None:
            await message.answer(
                "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.")
        else:
            await message.delete()

            user_id = await get_user_id(telegram_id=message.from_user.id)
            await update_user_car(data=['license_plate', car_number], user_id=user_id)

            await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_number}.\n"
                                 f"–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è {country}")
            await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª—è ‚úÖ', reply_markup=kb.main)
        await state.clear()


@router.message(F.text == '–ù–∞–π—Ç–∏ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ üöó')
async def driver_search_function(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ')

    await state.set_state(UsersSearchStates.waiting_for_license_plate)

    @router.message(UsersSearchStates.waiting_for_license_plate)
    async def get_message_car_number(message: Message, state: FSMContext):
        car_number = message.text

        country = await validate_car_number(car_number)

        if country is None:
            await message.answer(
                "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–Ω–æ–≤–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É.")
            await state.clear()

        else:
            await message.delete()
            await message.answer(f"–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {car_number}")
            users_list = await driver_search(car_number)
            if users_list:
                await state.set_state(UsersSearchStates.waiting_for_users_info)
                keyboard = await kb.get_users_list_keyboard(users_list)
                await message.answer(f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º: ', reply_markup=keyboard.as_markup())
            if not users_list:
                await message.answer('–ü–æ—Ö–æ–∂–µ –≤–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ')

                await state.clear()

        @router.callback_query(UsersSearchStates.waiting_for_users_info)
        async def users_messages(callback: CallbackQuery, state: FSMContext):
            data = callback.data.split(' ')
            user_name = data[2] + ' ' + data[3]
            await process_callback(callback, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}')

            await state.clear()

            keyboard = await kb.get_or_not_message_keyboard()
            await callback.message.answer(f'–ñ–µ–ª–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ: ',
                                          reply_markup=keyboard.as_markup())

            @router.callback_query(lambda query: query.data == 'send a message')
            async def send_message_to_user(callback: CallbackQuery, state: FSMContext):
                await process_callback(callback, f'–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ')
                await state.set_state(UsersSearchStates.waiting_for_message_to_user)

                @router.message(UsersSearchStates.waiting_for_message_to_user)
                async def get_message_for_user(message: Message):
                    message_text = message.text
                    receiver_user_id = int(data[1])
                    sender_user_id = await get_user_id(telegram_id=message.from_user.id)
                    await add_message(sender_user_id=sender_user_id, receiver_user_id=receiver_user_id,
                                      message_text=message_text)
                    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                    await state.clear()


@router.message(F.text == '–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚úâ')
async def my_messages(message: Message):
    is_registered = await is_user_registered(message.from_user.id)

    if is_registered is None:
        await message.answer('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
        return

    your_id = await get_user_id(telegram_id=message.from_user.id)
    your_messages_data = await your_messages(your_id)
    if your_messages_data:
        await message.answer('–í–æ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º: ')
        for u_message in your_messages_data:
            await message.answer(f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {u_message[0]}. \n'
                                 f'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {u_message[1]}.')
    elif not your_messages_data:
        await message.answer('–ü–æ–∫–∞ –≤–∞–º –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π')


@router.callback_query(lambda query: query.data == 'dont send message')
async def back(callback: CallbackQuery):
    await process_callback(callback, '–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é')
